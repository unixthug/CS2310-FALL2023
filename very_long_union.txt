//VERY LONG SOLUTION
void Operations(vector <int> a, vector <int> b)
{
    vector<int> abunion;
    cout << a.size() << endl;
    cout << b.size() << endl;
    if (a.size() > b.size()) {
        for (int i = 0; i < a.size(); i++) {
            for (int j = 0; i < b.size(); i++) {
                if (a[i] == b[j]) {
                    continue;
                }  
                abunion.push_back(a[i]);
            }
        }
        for (int i = 0; i < b.size(); i++) {
            for (int j = 0; i < a.size(); i++) {
                if (b[i] == a[j]) {
                    continue;
                }  
                abunion.push_back(b[i]);
            }
        }
    } else {
        for (int i = 0; i < b.size(); i++) {
            for (int j = 0; i < a.size(); i++) {
                if (b[i] == a[j]) {
                    continue;
                }  
                abunion.push_back(b[i]);
            }
        }
        for (int i = 0; i < a.size(); i++) {
            for (int j = 0; i < b.size(); i++) {
                if (a[i] == b[j]) {
                    continue;
                }  
                abunion.push_back(a[i]);
            }
        }

    }
    abunion.erase(abunion.end() - 2, abunion.end());

    cout << "Union: " << endl;
    for (const int& i : abunion) {
        cout << i << " ";
    }
}